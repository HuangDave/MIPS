main:           addiu   $a0, $0, 0x100      # array base addr: my_array
                addiu   $a1, $0, 0          # i = 0
                addiu   $t0, $0, 3          # t0 = 3, i multiplier
                addiu   $t1, $0, 50         # $t1 = 50
createArray:    slt     $t2, $a1, $t1       # i < 50
                beq     $t2, $0, arrayDone
                sll     $t2, $a1, 2         # $t2 = offset = i * 4
                add     $t2, $t2, $a0       # $t2 = base_addr + offset
                mult    $a1, $t0            # lo = i * 3
                mflo    $t3                 # $t3 = lo = i * 3
                sw      $t3, 0($t2)         # my_array[i] = $t3
                addi    $a1, $a1, 1         # i++
                j       createArray
arrayDone:
    lw      $t0, 100($a0)       # $t0 = my_array[25]
    lw      $t1, 120($a0)       # $t1 = my_array[30]
    add     $t0, $t0, $t1       # $t0 = $t0 + $t1 = my_array[25] + my_array[30]
    addiu   $t1, $0, 30         # $t1 = 30
    div     $t0, $t1            # {hi, lo} = $t0 / $t1
    mflo    $a1                 # $a1 = lo = (my_array[25] + my_array[30]) / 30
    jal     factorial
    add     $s0, $v0, $0        # $s0 = factorial(n)
    j       exit                # exit
factorial:
    addi    $sp, $sp, -8        # $sp = sp -8
    sw      $a1, 4($sp)         #
    sw      $ra, 0($sp)         #
    addi    $t0, $0, 2          # t0 = 2
    slt     $t0, $a1, $t0       # t0 = (a1 < 2)
    beq     $t0, $0, else       #
    addi    $v0, $0, 1          # $v0 = 1
    addi    $sp, $sp, 8         # restore stack
    jr      $ra                 # return
else:
    addi    $a1, $a1, -1        # n = n -1
    jal     factorial           # jump to factorial
    lw      $ra, 0($sp)         #
    lw      $a1, 4($sp)         #
    addi    $sp, $sp, 8         # restore stack
    mult    $a1, $v0            # lo = i * 3
    mflo    $v0
    jr      $ra                 # return
exit:
    sw      $a1, 0x00($0)       # 7. [0x00] = n
    sw      $s0, 0x10($0)       # 7. [0x00] = n!
